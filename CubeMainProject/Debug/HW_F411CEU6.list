
HW_F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000397c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b64  08003b64  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b6c  08003b6c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a98  20000014  08003b88  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aac  08003b88  00021aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdfa  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a49  00000000  00000000  0002fe81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  000328d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c97  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001753a  00000000  00000000  000345c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d2b  00000000  00000000  0004bb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095792  00000000  00000000  0005d82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043b4  00000000  00000000  000f2fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000f7374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b04 	.word	0x08003b04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08003b04 	.word	0x08003b04

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000030 	.word	0x20000030
 800050c:	20000084 	.word	0x20000084

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa67 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f82d 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8cb 	bl	80006b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000522:	f000 f891 	bl	8000648 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_GPIO_Init();
 8000526:	f003 f99b 	bl	8003860 <ST7789_GPIO_Init>
  ST7789_Init();
 800052a:	f003 f9bf 	bl	80038ac <ST7789_Init>

  static volatile uint16_t color = 0xFFE0;
  //ST7789_FillArea(0, 0, 240, 240, (uint16_t *)&color[0]);
  ST7789_FillAreaWithColor(0, 0, 240, 280, color);
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <main+0x5c>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	b29b      	uxth	r3, r3
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	f44f 738c 	mov.w	r3, #280	; 0x118
 800053a:	22f0      	movs	r2, #240	; 0xf0
 800053c:	2100      	movs	r1, #0
 800053e:	2000      	movs	r0, #0
 8000540:	f003 fa82 	bl	8003a48 <ST7789_FillAreaWithColor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0x60>)
 8000546:	1d3c      	adds	r4, r7, #4
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fecf 	bl	80022fe <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a04      	ldr	r2, [pc, #16]	; (8000574 <main+0x64>)
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f001 fec3 	bl	80022f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x5a>
 800056c:	20000000 	.word	0x20000000
 8000570:	08003b28 	.word	0x08003b28
 8000574:	200002dc 	.word	0x200002dc

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fa8f 	bl	8003aaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <SystemClock_Config+0xc8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a20      	ldr	r2, [pc, #128]	; (8000644 <SystemClock_Config+0xcc>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <SystemClock_Config+0xcc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ec:	23c0      	movs	r3, #192	; 0xc0
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fcd9 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f8a6 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2103      	movs	r1, #3
 8000628:	4618      	mov	r0, r3
 800062a:	f000 ff3b 	bl	80014a4 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000634:	f000 f890 	bl	8000758 <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	; 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_SPI1_Init+0x68>)
 800064e:	4a19      	ldr	r2, [pc, #100]	; (80006b4 <MX_SPI1_Init+0x6c>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_SPI1_Init+0x68>)
 800065c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000660:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI1_Init+0x68>)
 800066a:	2202      	movs	r2, #2
 800066c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000670:	2201      	movs	r2, #1
 8000672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI1_Init+0x68>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI1_Init+0x68>)
 8000696:	220a      	movs	r2, #10
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_SPI1_Init+0x68>)
 800069c:	f001 f900 	bl	80018a0 <HAL_SPI_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006a6:	f000 f857 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000284 	.word	0x20000284
 80006b4:	40013000 	.word	0x40013000

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_GPIO_Init+0x68>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <MX_GPIO_Init+0x68>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_GPIO_Init+0x68>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_GPIO_Init+0x68>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MX_GPIO_Init+0x68>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_GPIO_Init+0x68>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_GPIO_Init+0x68>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <MX_GPIO_Init+0x68>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_GPIO_Init+0x68>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f001 fe32 	bl	8002396 <osDelay>
 8000732:	e7fb      	b.n	800072c <StartDefaultTask+0x8>

08000734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d101      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000746:	f000 f971 	bl	8000a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40014000 	.word	0x40014000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_MspInit+0x54>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <HAL_MspInit+0x54>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_MspInit+0x54>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_MspInit+0x54>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	; 0x40
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	f06f 0001 	mvn.w	r0, #1
 80007aa:	f000 fa3b 	bl	8000c24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_SPI_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12b      	bne.n	8000836 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_SPI_MspInit+0x88>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_SPI_MspInit+0x88>)
 80007e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_SPI_MspInit+0x88>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_SPI_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_SPI_MspInit+0x88>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_SPI_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000816:	2328      	movs	r3, #40	; 0x28
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000826:	2305      	movs	r3, #5
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_SPI_MspInit+0x8c>)
 8000832:	f000 fa21 	bl	8000c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40013000 	.word	0x40013000
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <HAL_InitTick+0xd0>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <HAL_InitTick+0xd0>)
 8000866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086a:	6453      	str	r3, [r2, #68]	; 0x44
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_InitTick+0xd0>)
 800086e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000878:	f107 020c 	add.w	r2, r7, #12
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ffda 	bl	800183c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000888:	f000 ffc4 	bl	8001814 <HAL_RCC_GetPCLK2Freq>
 800088c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000890:	4a23      	ldr	r2, [pc, #140]	; (8000920 <HAL_InitTick+0xd4>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	3b01      	subs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_InitTick+0xd8>)
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <HAL_InitTick+0xdc>)
 80008a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_InitTick+0xd8>)
 80008a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <HAL_InitTick+0xd8>)
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_InitTick+0xd8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_InitTick+0xd8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_InitTick+0xd8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <HAL_InitTick+0xd8>)
 80008c4:	f001 fa7c 	bl	8001dc0 <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d11b      	bne.n	800090e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <HAL_InitTick+0xd8>)
 80008d8:	f001 facc 	bl	8001e74 <HAL_TIM_Base_Start_IT>
 80008dc:	4603      	mov	r3, r0
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d111      	bne.n	800090e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80008ea:	2018      	movs	r0, #24
 80008ec:	f000 f9b6 	bl	8000c5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	d808      	bhi.n	8000908 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80008f6:	2200      	movs	r2, #0
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	2018      	movs	r0, #24
 80008fc:	f000 f992 	bl	8000c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_InitTick+0xe0>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e002      	b.n	800090e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800090e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000912:	4618      	mov	r0, r3
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	431bde83 	.word	0x431bde83
 8000924:	20000534 	.word	0x20000534
 8000928:	40014000 	.word	0x40014000
 800092c:	20000008 	.word	0x20000008

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000962:	f001 fae9 	bl	8001f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000534 	.word	0x20000534

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009be:	f7ff ffd7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f003 f87b 	bl	8003abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fda3 	bl	8000510 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009d8:	08003b74 	.word	0x08003b74
  ldr r2, =_sbss
 80009dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009e0:	20001aac 	.word	0x20001aac

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f8fc 	bl	8000c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f7ff ff18 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fea2 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2000000c 	.word	0x2000000c
 8000a50:	2000057c 	.word	0x2000057c

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000057c 	.word	0x2000057c

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	; (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ff4c 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c36:	f7ff ff61 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	6978      	ldr	r0, [r7, #20]
 8000c42:	f7ff ffb1 	bl	8000ba8 <NVIC_EncodePriority>
 8000c46:	4602      	mov	r2, r0
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff80 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff54 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e159      	b.n	8000f48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f040 8148 	bne.w	8000f42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d130      	bne.n	8000d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d017      	beq.n	8000d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	69b9      	ldr	r1, [r7, #24]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80a2 	beq.w	8000f42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a56      	ldr	r2, [pc, #344]	; (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b54      	ldr	r3, [pc, #336]	; (8000f60 <HAL_GPIO_Init+0x2e8>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1a:	4a52      	ldr	r2, [pc, #328]	; (8000f64 <HAL_GPIO_Init+0x2ec>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <HAL_GPIO_Init+0x2f0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x202>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x2f4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x1fe>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x2f8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x1fa>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <HAL_GPIO_Init+0x2fc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x1f6>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <HAL_GPIO_Init+0x300>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x1f2>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e008      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x204>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	f002 0203 	and.w	r2, r2, #3
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e8c:	4935      	ldr	r1, [pc, #212]	; (8000f64 <HAL_GPIO_Init+0x2ec>)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ebe:	4a2f      	ldr	r2, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee8:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	f67f aea2 	bls.w	8000c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f9c:	e003      	b.n	8000fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	041a      	lsls	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e267      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d075      	beq.n	80010be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fd2:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d00c      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fde:	4b85      	ldr	r3, [pc, #532]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d112      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fea:	4b82      	ldr	r3, [pc, #520]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ff6:	d10b      	bne.n	8001010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d05b      	beq.n	80010bc <HAL_RCC_OscConfig+0x108>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d157      	bne.n	80010bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e242      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001018:	d106      	bne.n	8001028 <HAL_RCC_OscConfig+0x74>
 800101a:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a75      	ldr	r2, [pc, #468]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xb0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x98>
 8001032:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6f      	ldr	r2, [pc, #444]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6c      	ldr	r2, [pc, #432]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xb0>
 800104c:	4b69      	ldr	r3, [pc, #420]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a68      	ldr	r2, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a65      	ldr	r2, [pc, #404]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcf2 	bl	8000a54 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fcee 	bl	8000a54 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e207      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xc0>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fcde 	bl	8000a54 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fcda 	bl	8000a54 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1f3      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0xe8>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x152>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1c7      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4937      	ldr	r1, [pc, #220]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <HAL_RCC_OscConfig+0x244>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff fc93 	bl	8000a54 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc8f 	bl	8000a54 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e1a8      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4925      	ldr	r1, [pc, #148]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_RCC_OscConfig+0x244>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fc72 	bl	8000a54 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fc6e 	bl	8000a54 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e187      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d036      	beq.n	800120c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d016      	beq.n	80011d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_RCC_OscConfig+0x248>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fc52 	bl	8000a54 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc4e 	bl	8000a54 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e167      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x200>
 80011d2:	e01b      	b.n	800120c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_RCC_OscConfig+0x248>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fc3b 	bl	8000a54 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	e00e      	b.n	8001200 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fc37 	bl	8000a54 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d907      	bls.n	8001200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e150      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
 80011f4:	40023800 	.word	0x40023800
 80011f8:	42470000 	.word	0x42470000
 80011fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ea      	bne.n	80011e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 8097 	beq.w	8001348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121e:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b7d      	ldr	r3, [pc, #500]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a7c      	ldr	r2, [pc, #496]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b7a      	ldr	r3, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b77      	ldr	r3, [pc, #476]	; (8001428 <HAL_RCC_OscConfig+0x474>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b74      	ldr	r3, [pc, #464]	; (8001428 <HAL_RCC_OscConfig+0x474>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a73      	ldr	r2, [pc, #460]	; (8001428 <HAL_RCC_OscConfig+0x474>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fbf7 	bl	8000a54 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fbf3 	bl	8000a54 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e10c      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x474>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x2ea>
 8001290:	4b64      	ldr	r3, [pc, #400]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001294:	4a63      	ldr	r2, [pc, #396]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6713      	str	r3, [r2, #112]	; 0x70
 800129c:	e01c      	b.n	80012d8 <HAL_RCC_OscConfig+0x324>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x30c>
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012aa:	4a5e      	ldr	r2, [pc, #376]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6713      	str	r3, [r2, #112]	; 0x70
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b6:	4a5b      	ldr	r2, [pc, #364]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	; 0x70
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0x324>
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c4:	4a57      	ldr	r2, [pc, #348]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6713      	str	r3, [r2, #112]	; 0x70
 80012cc:	4b55      	ldr	r3, [pc, #340]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d0:	4a54      	ldr	r2, [pc, #336]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f023 0304 	bic.w	r3, r3, #4
 80012d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d015      	beq.n	800130c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fbb8 	bl	8000a54 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fbb4 	bl	8000a54 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0cb      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fe:	4b49      	ldr	r3, [pc, #292]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ee      	beq.n	80012e8 <HAL_RCC_OscConfig+0x334>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fba2 	bl	8000a54 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001312:	e00a      	b.n	800132a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7ff fb9e 	bl	8000a54 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0b5      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1ee      	bne.n	8001314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a38      	ldr	r2, [pc, #224]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80a1 	beq.w	8001494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d05c      	beq.n	8001418 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d141      	bne.n	80013ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_RCC_OscConfig+0x478>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb72 	bl	8000a54 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb6e 	bl	8000a54 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e087      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	019b      	lsls	r3, r3, #6
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	3b01      	subs	r3, #1
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	491b      	ldr	r1, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x478>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb47 	bl	8000a54 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ca:	f7ff fb43 	bl	8000a54 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e05c      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x416>
 80013e8:	e054      	b.n	8001494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_RCC_OscConfig+0x478>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb30 	bl	8000a54 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb2c 	bl	8000a54 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e045      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_RCC_OscConfig+0x470>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x444>
 8001416:	e03d      	b.n	8001494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e038      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000
 800142c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d028      	beq.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d121      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d11a      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001460:	4013      	ands	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001468:	4293      	cmp	r3, r2
 800146a:	d111      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	3b01      	subs	r3, #1
 800147a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d107      	bne.n	8001490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0cc      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b68      	ldr	r3, [pc, #416]	; (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d90c      	bls.n	80014e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b65      	ldr	r3, [pc, #404]	; (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b63      	ldr	r3, [pc, #396]	; (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0b8      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a58      	ldr	r2, [pc, #352]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800151a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151c:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	494d      	ldr	r1, [pc, #308]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d044      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d119      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e07f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d003      	beq.n	8001562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155e:	2b03      	cmp	r3, #3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e06f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e067      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b37      	ldr	r3, [pc, #220]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4934      	ldr	r1, [pc, #208]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff fa5e 	bl	8000a54 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff fa5a 	bl	8000a54 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e04f      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d20c      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e032      	b.n	8001652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4916      	ldr	r1, [pc, #88]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	490e      	ldr	r1, [pc, #56]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800162a:	f000 f821 	bl	8001670 <HAL_RCC_GetSysClockFreq>
 800162e:	4602      	mov	r2, r0
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	5ccb      	ldrb	r3, [r1, r3]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f8fe 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00
 8001660:	40023800 	.word	0x40023800
 8001664:	08003b4c 	.word	0x08003b4c
 8001668:	20000004 	.word	0x20000004
 800166c:	20000008 	.word	0x20000008

08001670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001674:	b090      	sub	sp, #64	; 0x40
 8001676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d00d      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001694:	2b08      	cmp	r3, #8
 8001696:	f200 80a1 	bhi.w	80017dc <HAL_RCC_GetSysClockFreq+0x16c>
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x34>
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x3a>
 80016a2:	e09b      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016a8:	e09b      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016aa:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ae:	e098      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b0:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ba:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	099b      	lsrs	r3, r3, #6
 80016cc:	2200      	movs	r2, #0
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	627a      	str	r2, [r7, #36]	; 0x24
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016d8:	2100      	movs	r1, #0
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016dc:	fb03 f201 	mul.w	r2, r3, r1
 80016e0:	2300      	movs	r3, #0
 80016e2:	fb00 f303 	mul.w	r3, r0, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	4a43      	ldr	r2, [pc, #268]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ea:	fba0 1202 	umull	r1, r2, r0, r2
 80016ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f0:	460a      	mov	r2, r1
 80016f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80016f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f6:	4413      	add	r3, r2
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fc:	2200      	movs	r2, #0
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	61fa      	str	r2, [r7, #28]
 8001702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800170a:	f7fe fd69 	bl	80001e0 <__aeabi_uldivmod>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4613      	mov	r3, r2
 8001714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001716:	e053      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	617a      	str	r2, [r7, #20]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800172a:	f04f 0b00 	mov.w	fp, #0
 800172e:	4652      	mov	r2, sl
 8001730:	465b      	mov	r3, fp
 8001732:	f04f 0000 	mov.w	r0, #0
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	0159      	lsls	r1, r3, #5
 800173c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001740:	0150      	lsls	r0, r2, #5
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	ebb2 080a 	subs.w	r8, r2, sl
 800174a:	eb63 090b 	sbc.w	r9, r3, fp
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800175a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800175e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001762:	ebb2 0408 	subs.w	r4, r2, r8
 8001766:	eb63 0509 	sbc.w	r5, r3, r9
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	00eb      	lsls	r3, r5, #3
 8001774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001778:	00e2      	lsls	r2, r4, #3
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	eb14 030a 	adds.w	r3, r4, sl
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	eb45 030b 	adc.w	r3, r5, fp
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001796:	4629      	mov	r1, r5
 8001798:	028b      	lsls	r3, r1, #10
 800179a:	4621      	mov	r1, r4
 800179c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a0:	4621      	mov	r1, r4
 80017a2:	028a      	lsls	r2, r1, #10
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017aa:	2200      	movs	r2, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	60fa      	str	r2, [r7, #12]
 80017b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017b4:	f7fe fd14 	bl	80001e0 <__aeabi_uldivmod>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4613      	mov	r3, r2
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	3301      	adds	r3, #1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017da:	e002      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3740      	adds	r7, #64	; 0x40
 80017e8:	46bd      	mov	sp, r7
 80017ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	00f42400 	.word	0x00f42400
 80017f8:	017d7840 	.word	0x017d7840

080017fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_RCC_GetHCLKFreq+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001818:	f7ff fff0 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0b5b      	lsrs	r3, r3, #13
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4903      	ldr	r1, [pc, #12]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	08003b5c 	.word	0x08003b5c

0800183c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	220f      	movs	r2, #15
 800184a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_RCC_GetClockConfig+0x60>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0207 	and.w	r2, r3, #7
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e07b      	b.n	80019aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018c2:	d009      	beq.n	80018d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
 80018ca:	e005      	b.n	80018d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe ff62 	bl	80007bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800190e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	ea42 0103 	orr.w	r1, r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	f003 0104 	and.w	r1, r3, #4
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 0210 	and.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b088      	sub	sp, #32
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_SPI_Transmit+0x22>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e126      	b.n	8001c22 <HAL_SPI_Transmit+0x270>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019dc:	f7ff f83a 	bl	8000a54 <HAL_GetTick>
 80019e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d002      	beq.n	80019f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019f6:	e10b      	b.n	8001c10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_SPI_Transmit+0x52>
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a08:	e102      	b.n	8001c10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	88fa      	ldrh	r2, [r7, #6]
 8001a28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a50:	d10f      	bne.n	8001a72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	d007      	beq.n	8001a90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a98:	d14b      	bne.n	8001b32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_SPI_Transmit+0xf6>
 8001aa2:	8afb      	ldrh	r3, [r7, #22]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d13e      	bne.n	8001b26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	881a      	ldrh	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	1c9a      	adds	r2, r3, #2
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001acc:	e02b      	b.n	8001b26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d112      	bne.n	8001b02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	1c9a      	adds	r2, r3, #2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b00:	e011      	b.n	8001b26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b02:	f7fe ffa7 	bl	8000a54 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d803      	bhi.n	8001b1a <HAL_SPI_Transmit+0x168>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d102      	bne.n	8001b20 <HAL_SPI_Transmit+0x16e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b24:	e074      	b.n	8001c10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ce      	bne.n	8001ace <HAL_SPI_Transmit+0x11c>
 8001b30:	e04c      	b.n	8001bcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_SPI_Transmit+0x18e>
 8001b3a:	8afb      	ldrh	r3, [r7, #22]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d140      	bne.n	8001bc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b66:	e02c      	b.n	8001bc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d113      	bne.n	8001b9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	330c      	adds	r3, #12
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b9c:	e011      	b.n	8001bc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b9e:	f7fe ff59 	bl	8000a54 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d803      	bhi.n	8001bb6 <HAL_SPI_Transmit+0x204>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d102      	bne.n	8001bbc <HAL_SPI_Transmit+0x20a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bc0:	e026      	b.n	8001c10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1cd      	bne.n	8001b68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	6839      	ldr	r1, [r7, #0]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f8b3 	bl	8001d3c <SPI_EndRxTxTransaction>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]
 8001c0c:	e000      	b.n	8001c10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001c0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c3c:	f7fe ff0a 	bl	8000a54 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c4c:	f7fe ff02 	bl	8000a54 <HAL_GetTick>
 8001c50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	0d1b      	lsrs	r3, r3, #20
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c62:	e054      	b.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d050      	beq.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c6c:	f7fe fef2 	bl	8000a54 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d902      	bls.n	8001c82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13d      	bne.n	8001cfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c9a:	d111      	bne.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca4:	d004      	beq.n	8001cb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d107      	bne.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc8:	d10f      	bne.n	8001cea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e017      	b.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d19b      	bne.n	8001c64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000004 	.word	0x20000004

08001d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <SPI_EndRxTxTransaction+0x7c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <SPI_EndRxTxTransaction+0x80>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d66:	d112      	bne.n	8001d8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff ff5a 	bl	8001c2c <SPI_WaitFlagStateUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f043 0220 	orr.w	r2, r3, #32
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e00f      	b.n	8001dae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d0f2      	beq.n	8001d8e <SPI_EndRxTxTransaction+0x52>
 8001da8:	e000      	b.n	8001dac <SPI_EndRxTxTransaction+0x70>
        break;
 8001daa:	bf00      	nop
  }

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	165e9f81 	.word	0x165e9f81

08001dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e041      	b.n	8001e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f839 	bl	8001e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f000 f9ca 	bl	8002198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e044      	b.n	8001f16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <HAL_TIM_Base_Start_IT+0xb0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d018      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d013      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_TIM_Base_Start_IT+0xb8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <HAL_TIM_Base_Start_IT+0xc0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d111      	bne.n	8001f04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d010      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f02:	e007      	b.n	8001f14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40000c00 	.word	0x40000c00
 8001f34:	40014000 	.word	0x40014000

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8ee 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8e0 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8f1 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8c4 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8b6 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8c7 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f89a 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f88c 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f89d 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f870 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f862 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f873 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0201 	mvn.w	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fb3c 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8e2 	bl	80022ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f838 	bl	8002184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8ac 	bl	8002298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a34      	ldr	r2, [pc, #208]	; (800227c <TIM_Base_SetConfig+0xe4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00f      	beq.n	80021d0 <TIM_Base_SetConfig+0x38>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d00b      	beq.n	80021d0 <TIM_Base_SetConfig+0x38>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a31      	ldr	r2, [pc, #196]	; (8002280 <TIM_Base_SetConfig+0xe8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <TIM_Base_SetConfig+0x38>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a30      	ldr	r2, [pc, #192]	; (8002284 <TIM_Base_SetConfig+0xec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0x38>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <TIM_Base_SetConfig+0xf0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0xe4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01b      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f0:	d017      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a22      	ldr	r2, [pc, #136]	; (8002280 <TIM_Base_SetConfig+0xe8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <TIM_Base_SetConfig+0xec>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00f      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <TIM_Base_SetConfig+0xf0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00b      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1f      	ldr	r2, [pc, #124]	; (800228c <TIM_Base_SetConfig+0xf4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <TIM_Base_SetConfig+0xf8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_Base_SetConfig+0x8a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <TIM_Base_SetConfig+0xfc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d108      	bne.n	8002234 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <TIM_Base_SetConfig+0xe4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	615a      	str	r2, [r3, #20]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40010000 	.word	0x40010000
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800

08002298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80022ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d2:	2b84      	cmp	r3, #132	; 0x84
 80022d4:	d005      	beq.n	80022e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80022d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	3303      	adds	r3, #3
 80022e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80022f4:	f000 fade 	bl	80028b4 <vTaskStartScheduler>
  
  return osOK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}

080022fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002300:	b089      	sub	sp, #36	; 0x24
 8002302:	af04      	add	r7, sp, #16
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <osThreadCreate+0x54>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01c      	beq.n	8002352 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685c      	ldr	r4, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691e      	ldr	r6, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ffc8 	bl	80022c0 <makeFreeRtosPriority>
 8002330:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800233a:	9202      	str	r2, [sp, #8]
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	9100      	str	r1, [sp, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4632      	mov	r2, r6
 8002344:	4629      	mov	r1, r5
 8002346:	4620      	mov	r0, r4
 8002348:	f000 f8ed 	bl	8002526 <xTaskCreateStatic>
 800234c:	4603      	mov	r3, r0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e01c      	b.n	800238c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685c      	ldr	r4, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800235e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffaa 	bl	80022c0 <makeFreeRtosPriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	4632      	mov	r2, r6
 800237a:	4629      	mov	r1, r5
 800237c:	4620      	mov	r0, r4
 800237e:	f000 f92f 	bl	80025e0 <xTaskCreate>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d001      	beq.n	800238c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002396 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <osDelay+0x16>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	e000      	b.n	80023ae <osDelay+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fa4c 	bl	800284c <vTaskDelay>
  
  return osOK;
 80023b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f103 0208 	add.w	r2, r3, #8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f04f 32ff 	mov.w	r2, #4294967295
 80023d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f103 0208 	add.w	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f103 0208 	add.w	r2, r3, #8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d103      	bne.n	8002480 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e00c      	b.n	800249a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3308      	adds	r3, #8
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e002      	b.n	800248e <vListInsert+0x2e>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d2f6      	bcs.n	8002488 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6852      	ldr	r2, [r2, #4]
 80024f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d103      	bne.n	8002506 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002526:	b580      	push	{r7, lr}
 8002528:	b08e      	sub	sp, #56	; 0x38
 800252a:	af04      	add	r7, sp, #16
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800254c:	bf00      	nop
 800254e:	e7fe      	b.n	800254e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <xTaskCreateStatic+0x46>
	__asm volatile
 8002556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	61fb      	str	r3, [r7, #28]
}
 8002568:	bf00      	nop
 800256a:	e7fe      	b.n	800256a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800256c:	2354      	movs	r3, #84	; 0x54
 800256e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b54      	cmp	r3, #84	; 0x54
 8002574:	d00a      	beq.n	800258c <xTaskCreateStatic+0x66>
	__asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	61bb      	str	r3, [r7, #24]
}
 8002588:	bf00      	nop
 800258a:	e7fe      	b.n	800258a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800258c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01e      	beq.n	80025d2 <xTaskCreateStatic+0xac>
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01b      	beq.n	80025d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80025ac:	2300      	movs	r3, #0
 80025ae:	9303      	str	r3, [sp, #12]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	9302      	str	r3, [sp, #8]
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f850 	bl	800266a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025cc:	f000 f8d4 	bl	8002778 <prvAddNewTaskToReadyList>
 80025d0:	e001      	b.n	80025d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025d6:	697b      	ldr	r3, [r7, #20]
	}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fec7 	bl	8003388 <pvPortMalloc>
 80025fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00e      	beq.n	8002620 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002602:	2054      	movs	r0, #84	; 0x54
 8002604:	f000 fec0 	bl	8003388 <pvPortMalloc>
 8002608:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
 8002616:	e005      	b.n	8002624 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f000 ff81 	bl	8003520 <vPortFree>
 800261e:	e001      	b.n	8002624 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d017      	beq.n	800265a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	2300      	movs	r3, #0
 8002636:	9303      	str	r3, [sp, #12]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f80e 	bl	800266a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800264e:	69f8      	ldr	r0, [r7, #28]
 8002650:	f000 f892 	bl	8002778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002654:	2301      	movs	r3, #1
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e002      	b.n	8002660 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002660:	69bb      	ldr	r3, [r7, #24]
	}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b088      	sub	sp, #32
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002682:	3b01      	subs	r3, #1
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f023 0307 	bic.w	r3, r3, #7
 8002690:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	617b      	str	r3, [r7, #20]
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01f      	beq.n	80026f8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	e012      	b.n	80026e4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	7819      	ldrb	r1, [r3, #0]
 80026c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	3334      	adds	r3, #52	; 0x34
 80026ce:	460a      	mov	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	d9e9      	bls.n	80026be <prvInitialiseNewTask+0x54>
 80026ea:	e000      	b.n	80026ee <prvInitialiseNewTask+0x84>
			{
				break;
 80026ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f6:	e003      	b.n	8002700 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	2b04      	cmp	r3, #4
 8002704:	d901      	bls.n	800270a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002706:	2304      	movs	r3, #4
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	2200      	movs	r2, #0
 800271a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fe6c 	bl	80023fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	3318      	adds	r3, #24
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fe67 	bl	80023fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002734:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	f1c3 0205 	rsb	r2, r3, #5
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	2200      	movs	r2, #0
 800274a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	69b8      	ldr	r0, [r7, #24]
 800275a:	f000 fc05 	bl	8002f68 <pxPortInitialiseStack>
 800275e:	4602      	mov	r2, r0
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800276e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002770:	bf00      	nop
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002780:	f000 fd20 	bl	80031c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <prvAddNewTaskToReadyList+0xb8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	4a29      	ldr	r2, [pc, #164]	; (8002830 <prvAddNewTaskToReadyList+0xb8>)
 800278c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <prvAddNewTaskToReadyList+0xbc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <prvAddNewTaskToReadyList+0xbc>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <prvAddNewTaskToReadyList+0xb8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d110      	bne.n	80027c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80027a4:	f000 fabc 	bl	8002d20 <prvInitialiseTaskLists>
 80027a8:	e00d      	b.n	80027c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <prvAddNewTaskToReadyList+0xc0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <prvAddNewTaskToReadyList+0xbc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d802      	bhi.n	80027c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <prvAddNewTaskToReadyList+0xbc>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <prvAddNewTaskToReadyList+0xc4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <prvAddNewTaskToReadyList+0xc4>)
 80027ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2201      	movs	r2, #1
 80027d6:	409a      	lsls	r2, r3
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <prvAddNewTaskToReadyList+0xc8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <prvAddNewTaskToReadyList+0xc8>)
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4a15      	ldr	r2, [pc, #84]	; (8002844 <prvAddNewTaskToReadyList+0xcc>)
 80027f0:	441a      	add	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7ff fe0d 	bl	8002418 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027fe:	f000 fd11 	bl	8003224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <prvAddNewTaskToReadyList+0xc0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00e      	beq.n	8002828 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <prvAddNewTaskToReadyList+0xbc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	429a      	cmp	r2, r3
 8002816:	d207      	bcs.n	8002828 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <prvAddNewTaskToReadyList+0xd0>)
 800281a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000658 	.word	0x20000658
 8002834:	20000580 	.word	0x20000580
 8002838:	20000664 	.word	0x20000664
 800283c:	20000674 	.word	0x20000674
 8002840:	20000660 	.word	0x20000660
 8002844:	20000584 	.word	0x20000584
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d017      	beq.n	800288e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <vTaskDelay+0x60>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <vTaskDelay+0x30>
	__asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	60bb      	str	r3, [r7, #8]
}
 8002878:	bf00      	nop
 800287a:	e7fe      	b.n	800287a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800287c:	f000 f87a 	bl	8002974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002880:	2100      	movs	r1, #0
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fb0a 	bl	8002e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002888:	f000 f882 	bl	8002990 <xTaskResumeAll>
 800288c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <vTaskDelay+0x64>)
 8002896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000680 	.word	0x20000680
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028c2:	463a      	mov	r2, r7
 80028c4:	1d39      	adds	r1, r7, #4
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe06 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	9202      	str	r2, [sp, #8]
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2300      	movs	r3, #0
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	460a      	mov	r2, r1
 80028e2:	491e      	ldr	r1, [pc, #120]	; (800295c <vTaskStartScheduler+0xa8>)
 80028e4:	481e      	ldr	r0, [pc, #120]	; (8002960 <vTaskStartScheduler+0xac>)
 80028e6:	f7ff fe1e 	bl	8002526 <xTaskCreateStatic>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <vTaskStartScheduler+0xb0>)
 80028ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <vTaskStartScheduler+0xb0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028f8:	2301      	movs	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e001      	b.n	8002902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d116      	bne.n	8002936 <vTaskStartScheduler+0x82>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	613b      	str	r3, [r7, #16]
}
 800291a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <vTaskStartScheduler+0xb4>)
 800291e:	f04f 32ff 	mov.w	r2, #4294967295
 8002922:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <vTaskStartScheduler+0xb8>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <vTaskStartScheduler+0xbc>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002930:	f000 fba6 	bl	8003080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002934:	e00e      	b.n	8002954 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d10a      	bne.n	8002954 <vTaskStartScheduler+0xa0>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	60fb      	str	r3, [r7, #12]
}
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <vTaskStartScheduler+0x9e>
}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	08003b44 	.word	0x08003b44
 8002960:	08002cf1 	.word	0x08002cf1
 8002964:	2000067c 	.word	0x2000067c
 8002968:	20000678 	.word	0x20000678
 800296c:	20000664 	.word	0x20000664
 8002970:	2000065c 	.word	0x2000065c

08002974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <vTaskSuspendAll+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <vTaskSuspendAll+0x18>)
 8002980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	20000680 	.word	0x20000680

08002990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800299e:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <xTaskResumeAll+0x114>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <xTaskResumeAll+0x2c>
	__asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	603b      	str	r3, [r7, #0]
}
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029bc:	f000 fc02 	bl	80031c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <xTaskResumeAll+0x114>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <xTaskResumeAll+0x114>)
 80029c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <xTaskResumeAll+0x114>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d161      	bne.n	8002a96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <xTaskResumeAll+0x118>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d05d      	beq.n	8002a96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029da:	e02e      	b.n	8002a3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <xTaskResumeAll+0x11c>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3318      	adds	r3, #24
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fd72 	bl	80024d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fd6d 	bl	80024d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <xTaskResumeAll+0x120>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <xTaskResumeAll+0x120>)
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <xTaskResumeAll+0x124>)
 8002a18:	441a      	add	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f7ff fcf9 	bl	8002418 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <xTaskResumeAll+0x128>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d302      	bcc.n	8002a3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <xTaskResumeAll+0x12c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <xTaskResumeAll+0x11c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cc      	bne.n	80029dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a48:	f000 fa08 	bl	8002e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <xTaskResumeAll+0x130>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a58:	f000 f836 	bl	8002ac8 <xTaskIncrementTick>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <xTaskResumeAll+0x12c>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f1      	bne.n	8002a58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <xTaskResumeAll+0x130>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <xTaskResumeAll+0x12c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <xTaskResumeAll+0x134>)
 8002a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a96:	f000 fbc5 	bl	8003224 <vPortExitCritical>

	return xAlreadyYielded;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000680 	.word	0x20000680
 8002aa8:	20000658 	.word	0x20000658
 8002aac:	20000618 	.word	0x20000618
 8002ab0:	20000660 	.word	0x20000660
 8002ab4:	20000584 	.word	0x20000584
 8002ab8:	20000580 	.word	0x20000580
 8002abc:	2000066c 	.word	0x2000066c
 8002ac0:	20000668 	.word	0x20000668
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <xTaskIncrementTick+0x144>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 808e 	bne.w	8002bf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <xTaskIncrementTick+0x148>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <xTaskIncrementTick+0x148>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d120      	bne.n	8002b32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <xTaskIncrementTick+0x14c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <xTaskIncrementTick+0x48>
	__asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	603b      	str	r3, [r7, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <xTaskIncrementTick+0x46>
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <xTaskIncrementTick+0x14c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <xTaskIncrementTick+0x150>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3e      	ldr	r2, [pc, #248]	; (8002c14 <xTaskIncrementTick+0x14c>)
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4a3e      	ldr	r2, [pc, #248]	; (8002c18 <xTaskIncrementTick+0x150>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <xTaskIncrementTick+0x154>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <xTaskIncrementTick+0x154>)
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	f000 f995 	bl	8002e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <xTaskIncrementTick+0x158>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d348      	bcc.n	8002bce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <xTaskIncrementTick+0x14c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <xTaskIncrementTick+0x158>)
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	601a      	str	r2, [r3, #0]
					break;
 8002b4e:	e03e      	b.n	8002bce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b50:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <xTaskIncrementTick+0x14c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d203      	bcs.n	8002b70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b68:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <xTaskIncrementTick+0x158>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b6e:	e02e      	b.n	8002bce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fcac 	bl	80024d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3318      	adds	r3, #24
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fca3 	bl	80024d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	2201      	movs	r2, #1
 8002b92:	409a      	lsls	r2, r3
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <xTaskIncrementTick+0x15c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <xTaskIncrementTick+0x15c>)
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <xTaskIncrementTick+0x160>)
 8002bac:	441a      	add	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	f7ff fc2f 	bl	8002418 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <xTaskIncrementTick+0x164>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3b9      	bcc.n	8002b3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bcc:	e7b6      	b.n	8002b3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <xTaskIncrementTick+0x164>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	4914      	ldr	r1, [pc, #80]	; (8002c28 <xTaskIncrementTick+0x160>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d901      	bls.n	8002bea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002be6:	2301      	movs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <xTaskIncrementTick+0x168>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e004      	b.n	8002c02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <xTaskIncrementTick+0x16c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <xTaskIncrementTick+0x16c>)
 8002c00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c02:	697b      	ldr	r3, [r7, #20]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000680 	.word	0x20000680
 8002c10:	2000065c 	.word	0x2000065c
 8002c14:	20000610 	.word	0x20000610
 8002c18:	20000614 	.word	0x20000614
 8002c1c:	20000670 	.word	0x20000670
 8002c20:	20000678 	.word	0x20000678
 8002c24:	20000660 	.word	0x20000660
 8002c28:	20000584 	.word	0x20000584
 8002c2c:	20000580 	.word	0x20000580
 8002c30:	2000066c 	.word	0x2000066c
 8002c34:	20000668 	.word	0x20000668

08002c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <vTaskSwitchContext+0xa4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <vTaskSwitchContext+0xa8>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c4c:	e03f      	b.n	8002cce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <vTaskSwitchContext+0xa8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <vTaskSwitchContext+0xac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f1c3 031f 	rsb	r3, r3, #31
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	491f      	ldr	r1, [pc, #124]	; (8002ce8 <vTaskSwitchContext+0xb0>)
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	607b      	str	r3, [r7, #4]
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <vTaskSwitchContext+0x5a>
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <vTaskSwitchContext+0xb0>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d104      	bne.n	8002cc4 <vTaskSwitchContext+0x8c>
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4a08      	ldr	r2, [pc, #32]	; (8002cec <vTaskSwitchContext+0xb4>)
 8002ccc:	6013      	str	r3, [r2, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000680 	.word	0x20000680
 8002ce0:	2000066c 	.word	0x2000066c
 8002ce4:	20000660 	.word	0x20000660
 8002ce8:	20000584 	.word	0x20000584
 8002cec:	20000580 	.word	0x20000580

08002cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cf8:	f000 f852 	bl	8002da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <prvIdleTask+0x28>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d9f9      	bls.n	8002cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <prvIdleTask+0x2c>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002d14:	e7f0      	b.n	8002cf8 <prvIdleTask+0x8>
 8002d16:	bf00      	nop
 8002d18:	20000584 	.word	0x20000584
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	e00c      	b.n	8002d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <prvInitialiseTaskLists+0x60>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fb3f 	bl	80023be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d9ef      	bls.n	8002d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <prvInitialiseTaskLists+0x64>)
 8002d4e:	f7ff fb36 	bl	80023be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <prvInitialiseTaskLists+0x68>)
 8002d54:	f7ff fb33 	bl	80023be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <prvInitialiseTaskLists+0x6c>)
 8002d5a:	f7ff fb30 	bl	80023be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <prvInitialiseTaskLists+0x70>)
 8002d60:	f7ff fb2d 	bl	80023be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d64:	480b      	ldr	r0, [pc, #44]	; (8002d94 <prvInitialiseTaskLists+0x74>)
 8002d66:	f7ff fb2a 	bl	80023be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <prvInitialiseTaskLists+0x78>)
 8002d6c:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <prvInitialiseTaskLists+0x64>)
 8002d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <prvInitialiseTaskLists+0x7c>)
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <prvInitialiseTaskLists+0x68>)
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000584 	.word	0x20000584
 8002d84:	200005e8 	.word	0x200005e8
 8002d88:	200005fc 	.word	0x200005fc
 8002d8c:	20000618 	.word	0x20000618
 8002d90:	2000062c 	.word	0x2000062c
 8002d94:	20000644 	.word	0x20000644
 8002d98:	20000610 	.word	0x20000610
 8002d9c:	20000614 	.word	0x20000614

08002da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002da6:	e019      	b.n	8002ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002da8:	f000 fa0c 	bl	80031c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <prvCheckTasksWaitingTermination+0x50>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fb8a 	bl	80024d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <prvCheckTasksWaitingTermination+0x54>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <prvCheckTasksWaitingTermination+0x54>)
 8002dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <prvCheckTasksWaitingTermination+0x58>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <prvCheckTasksWaitingTermination+0x58>)
 8002dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002dd2:	f000 fa27 	bl	8003224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f810 	bl	8002dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <prvCheckTasksWaitingTermination+0x58>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e1      	bne.n	8002da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	2000062c 	.word	0x2000062c
 8002df4:	20000658 	.word	0x20000658
 8002df8:	20000640 	.word	0x20000640

08002dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d108      	bne.n	8002e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fb84 	bl	8003520 <vPortFree>
				vPortFree( pxTCB );
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb81 	bl	8003520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e1e:	e018      	b.n	8002e52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d103      	bne.n	8002e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fb78 	bl	8003520 <vPortFree>
	}
 8002e30:	e00f      	b.n	8002e52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d00a      	beq.n	8002e52 <prvDeleteTCB+0x56>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	60fb      	str	r3, [r7, #12]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <prvDeleteTCB+0x54>
	}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <prvResetNextTaskUnblockTime+0x38>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <prvResetNextTaskUnblockTime+0x3c>)
 8002e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e74:	e008      	b.n	8002e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <prvResetNextTaskUnblockTime+0x38>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <prvResetNextTaskUnblockTime+0x3c>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	20000610 	.word	0x20000610
 8002e98:	20000678 	.word	0x20000678

08002e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fb0d 	bl	80024d2 <uxListRemove>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ed4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d10a      	bne.n	8002ef4 <prvAddCurrentTaskToDelayedList+0x58>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	481a      	ldr	r0, [pc, #104]	; (8002f58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002eee:	f7ff fa93 	bl	8002418 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ef2:	e026      	b.n	8002f42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d209      	bcs.n	8002f20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7ff faa1 	bl	8002460 <vListInsert>
}
 8002f1e:	e010      	b.n	8002f42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f7ff fa97 	bl	8002460 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d202      	bcs.n	8002f42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002f3c:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000065c 	.word	0x2000065c
 8002f50:	20000580 	.word	0x20000580
 8002f54:	20000660 	.word	0x20000660
 8002f58:	20000644 	.word	0x20000644
 8002f5c:	20000614 	.word	0x20000614
 8002f60:	20000610 	.word	0x20000610
 8002f64:	20000678 	.word	0x20000678

08002f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3b04      	subs	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b04      	subs	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3b04      	subs	r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002f98:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <pxPortInitialiseStack+0x64>)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3b14      	subs	r3, #20
 8002fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3b04      	subs	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f06f 0202 	mvn.w	r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3b20      	subs	r3, #32
 8002fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	08002fd1 	.word	0x08002fd1

08002fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <prvTaskExitError+0x54>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d00a      	beq.n	8002ffa <prvTaskExitError+0x2a>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	60fb      	str	r3, [r7, #12]
}
 8002ff6:	bf00      	nop
 8002ff8:	e7fe      	b.n	8002ff8 <prvTaskExitError+0x28>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	60bb      	str	r3, [r7, #8]
}
 800300c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800300e:	bf00      	nop
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0fc      	beq.n	8003010 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	20000010 	.word	0x20000010
	...

08003030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <pxCurrentTCBConst2>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	6808      	ldr	r0, [r1, #0]
 8003036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303a:	f380 8809 	msr	PSP, r0
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f380 8811 	msr	BASEPRI, r0
 800304a:	4770      	bx	lr
 800304c:	f3af 8000 	nop.w

08003050 <pxCurrentTCBConst2>:
 8003050:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop

08003058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003058:	4808      	ldr	r0, [pc, #32]	; (800307c <prvPortStartFirstTask+0x24>)
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	6800      	ldr	r0, [r0, #0]
 800305e:	f380 8808 	msr	MSP, r0
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8814 	msr	CONTROL, r0
 800306a:	b662      	cpsie	i
 800306c:	b661      	cpsie	f
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	df00      	svc	0
 8003078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800307a:	bf00      	nop
 800307c:	e000ed08 	.word	0xe000ed08

08003080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003086:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <xPortStartScheduler+0x120>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a46      	ldr	r2, [pc, #280]	; (80031a4 <xPortStartScheduler+0x124>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10a      	bne.n	80030a6 <xPortStartScheduler+0x26>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	613b      	str	r3, [r7, #16]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030a6:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <xPortStartScheduler+0x120>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3f      	ldr	r2, [pc, #252]	; (80031a8 <xPortStartScheduler+0x128>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10a      	bne.n	80030c6 <xPortStartScheduler+0x46>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	60fb      	str	r3, [r7, #12]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <xPortStartScheduler+0x12c>)
 80030c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	22ff      	movs	r2, #255	; 0xff
 80030d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <xPortStartScheduler+0x130>)
 80030ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <xPortStartScheduler+0x134>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030f4:	e009      	b.n	800310a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <xPortStartScheduler+0x134>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <xPortStartScheduler+0x134>)
 80030fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b80      	cmp	r3, #128	; 0x80
 8003114:	d0ef      	beq.n	80030f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <xPortStartScheduler+0x134>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1c3 0307 	rsb	r3, r3, #7
 800311e:	2b04      	cmp	r3, #4
 8003120:	d00a      	beq.n	8003138 <xPortStartScheduler+0xb8>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60bb      	str	r3, [r7, #8]
}
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003138:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <xPortStartScheduler+0x134>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <xPortStartScheduler+0x134>)
 8003140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <xPortStartScheduler+0x134>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <xPortStartScheduler+0x134>)
 800314c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <xPortStartScheduler+0x138>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <xPortStartScheduler+0x138>)
 800315c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <xPortStartScheduler+0x138>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <xPortStartScheduler+0x138>)
 8003168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800316c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800316e:	f000 f8dd 	bl	800332c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <xPortStartScheduler+0x13c>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003178:	f000 f8fc 	bl	8003374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <xPortStartScheduler+0x140>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <xPortStartScheduler+0x140>)
 8003182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003188:	f7ff ff66 	bl	8003058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800318c:	f7ff fd54 	bl	8002c38 <vTaskSwitchContext>
	prvTaskExitError();
 8003190:	f7ff ff1e 	bl	8002fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00
 80031a4:	410fc271 	.word	0x410fc271
 80031a8:	410fc270 	.word	0x410fc270
 80031ac:	e000e400 	.word	0xe000e400
 80031b0:	20000684 	.word	0x20000684
 80031b4:	20000688 	.word	0x20000688
 80031b8:	e000ed20 	.word	0xe000ed20
 80031bc:	20000010 	.word	0x20000010
 80031c0:	e000ef34 	.word	0xe000ef34

080031c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	607b      	str	r3, [r7, #4]
}
 80031dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <vPortEnterCritical+0x58>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <vPortEnterCritical+0x58>)
 80031e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <vPortEnterCritical+0x58>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10f      	bne.n	8003210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <vPortEnterCritical+0x5c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <vPortEnterCritical+0x4c>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	603b      	str	r3, [r7, #0]
}
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <vPortEnterCritical+0x4a>
	}
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	20000010 	.word	0x20000010
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <vPortExitCritical+0x50>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <vPortExitCritical+0x24>
	__asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	607b      	str	r3, [r7, #4]
}
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <vPortExitCritical+0x50>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3b01      	subs	r3, #1
 800324e:	4a09      	ldr	r2, [pc, #36]	; (8003274 <vPortExitCritical+0x50>)
 8003250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <vPortExitCritical+0x50>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <vPortExitCritical+0x42>
 800325a:	2300      	movs	r3, #0
 800325c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000010 	.word	0x20000010
	...

08003280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003280:	f3ef 8009 	mrs	r0, PSP
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <pxCurrentTCBConst>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f01e 0f10 	tst.w	lr, #16
 8003290:	bf08      	it	eq
 8003292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032a4:	f380 8811 	msr	BASEPRI, r0
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f7ff fcc2 	bl	8002c38 <vTaskSwitchContext>
 80032b4:	f04f 0000 	mov.w	r0, #0
 80032b8:	f380 8811 	msr	BASEPRI, r0
 80032bc:	bc09      	pop	{r0, r3}
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	6808      	ldr	r0, [r1, #0]
 80032c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c6:	f01e 0f10 	tst.w	lr, #16
 80032ca:	bf08      	it	eq
 80032cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032d0:	f380 8809 	msr	PSP, r0
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst>:
 80032e0:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
}
 8003300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003302:	f7ff fbe1 	bl	8002ac8 <xTaskIncrementTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SysTick_Handler+0x40>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f383 8811 	msr	BASEPRI, r3
}
 800331e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <vPortSetupTimerInterrupt+0x34>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <vPortSetupTimerInterrupt+0x38>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <vPortSetupTimerInterrupt+0x3c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <vPortSetupTimerInterrupt+0x40>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <vPortSetupTimerInterrupt+0x44>)
 800334a:	3b01      	subs	r3, #1
 800334c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <vPortSetupTimerInterrupt+0x34>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010
 8003364:	e000e018 	.word	0xe000e018
 8003368:	20000004 	.word	0x20000004
 800336c:	10624dd3 	.word	0x10624dd3
 8003370:	e000e014 	.word	0xe000e014

08003374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003384 <vPortEnableVFP+0x10>
 8003378:	6801      	ldr	r1, [r0, #0]
 800337a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800337e:	6001      	str	r1, [r0, #0]
 8003380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003382:	bf00      	nop
 8003384:	e000ed88 	.word	0xe000ed88

08003388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003394:	f7ff faee 	bl	8002974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003398:	4b5b      	ldr	r3, [pc, #364]	; (8003508 <pvPortMalloc+0x180>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80033a0:	f000 f920 	bl	80035e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <pvPortMalloc+0x184>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 8093 	bne.w	80034d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01d      	beq.n	80033f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80033b8:	2208      	movs	r2, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d014      	beq.n	80033f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f023 0307 	bic.w	r3, r3, #7
 80033d0:	3308      	adds	r3, #8
 80033d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <pvPortMalloc+0x6c>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	617b      	str	r3, [r7, #20]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06e      	beq.n	80034d8 <pvPortMalloc+0x150>
 80033fa:	4b45      	ldr	r3, [pc, #276]	; (8003510 <pvPortMalloc+0x188>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d869      	bhi.n	80034d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <pvPortMalloc+0x18c>)
 8003406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003408:	4b42      	ldr	r3, [pc, #264]	; (8003514 <pvPortMalloc+0x18c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800340e:	e004      	b.n	800341a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d903      	bls.n	800342c <pvPortMalloc+0xa4>
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f1      	bne.n	8003410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <pvPortMalloc+0x180>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	429a      	cmp	r2, r3
 8003434:	d050      	beq.n	80034d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2208      	movs	r2, #8
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	1ad2      	subs	r2, r2, r3
 8003450:	2308      	movs	r3, #8
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	429a      	cmp	r2, r3
 8003456:	d91f      	bls.n	8003498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <pvPortMalloc+0xf8>
	__asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	613b      	str	r3, [r7, #16]
}
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f000 f908 	bl	80036a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <pvPortMalloc+0x188>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <pvPortMalloc+0x188>)
 80034a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <pvPortMalloc+0x188>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <pvPortMalloc+0x190>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d203      	bcs.n	80034ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <pvPortMalloc+0x188>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <pvPortMalloc+0x190>)
 80034b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <pvPortMalloc+0x184>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80034ce:	4b13      	ldr	r3, [pc, #76]	; (800351c <pvPortMalloc+0x194>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <pvPortMalloc+0x194>)
 80034d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80034d8:	f7ff fa5a 	bl	8002990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <pvPortMalloc+0x174>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60fb      	str	r3, [r7, #12]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <pvPortMalloc+0x172>
	return pvReturn;
 80034fc:	69fb      	ldr	r3, [r7, #28]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20001a94 	.word	0x20001a94
 800350c:	20001aa8 	.word	0x20001aa8
 8003510:	20001a98 	.word	0x20001a98
 8003514:	20001a8c 	.word	0x20001a8c
 8003518:	20001a9c 	.word	0x20001a9c
 800351c:	20001aa0 	.word	0x20001aa0

08003520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04d      	beq.n	80035ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003532:	2308      	movs	r3, #8
 8003534:	425b      	negs	r3, r3
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4413      	add	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <vPortFree+0xb8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <vPortFree+0x44>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	60fb      	str	r3, [r7, #12]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <vPortFree+0x62>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	60bb      	str	r3, [r7, #8]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <vPortFree+0xb8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01e      	beq.n	80035ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11a      	bne.n	80035ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <vPortFree+0xb8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80035a8:	f7ff f9e4 	bl	8002974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <vPortFree+0xbc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4413      	add	r3, r2
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <vPortFree+0xbc>)
 80035b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035ba:	6938      	ldr	r0, [r7, #16]
 80035bc:	f000 f874 	bl	80036a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <vPortFree+0xc0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	4a06      	ldr	r2, [pc, #24]	; (80035e0 <vPortFree+0xc0>)
 80035c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80035ca:	f7ff f9e1 	bl	8002990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20001aa8 	.word	0x20001aa8
 80035dc:	20001a98 	.word	0x20001a98
 80035e0:	20001aa4 	.word	0x20001aa4

080035e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <prvHeapInit+0xac>)
 80035f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3307      	adds	r3, #7
 8003602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <prvHeapInit+0xac>)
 8003614:	4413      	add	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <prvHeapInit+0xb0>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <prvHeapInit+0xb0>)
 8003624:	2200      	movs	r2, #0
 8003626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003630:	2208      	movs	r2, #8
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0307 	bic.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a15      	ldr	r2, [pc, #84]	; (8003698 <prvHeapInit+0xb4>)
 8003644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <prvHeapInit+0xb4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <prvHeapInit+0xb4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <prvHeapInit+0xb4>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <prvHeapInit+0xb8>)
 8003672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <prvHeapInit+0xbc>)
 800367a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <prvHeapInit+0xc0>)
 800367e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	2000068c 	.word	0x2000068c
 8003694:	20001a8c 	.word	0x20001a8c
 8003698:	20001a94 	.word	0x20001a94
 800369c:	20001a9c 	.word	0x20001a9c
 80036a0:	20001a98 	.word	0x20001a98
 80036a4:	20001aa8 	.word	0x20001aa8

080036a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <prvInsertBlockIntoFreeList+0xac>)
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e002      	b.n	80036bc <prvInsertBlockIntoFreeList+0x14>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d8f7      	bhi.n	80036b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4413      	add	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d108      	bne.n	80036ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	441a      	add	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	441a      	add	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d118      	bne.n	8003730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <prvInsertBlockIntoFreeList+0xb0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d00d      	beq.n	8003726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e008      	b.n	8003738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <prvInsertBlockIntoFreeList+0xb0>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e003      	b.n	8003738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d002      	beq.n	8003746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20001a8c 	.word	0x20001a8c
 8003758:	20001a94 	.word	0x20001a94

0800375c <ST7789_WriteCommand>:
#include "ST7789.h"

extern SPI_HandleTypeDef hspi1;

static void ST7789_WriteCommand(uint8_t command)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
    ST7789_DC_Command();
 8003766:	2200      	movs	r2, #0
 8003768:	2104      	movs	r1, #4
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <ST7789_WriteCommand+0x28>)
 800376c:	f7fd fc08 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &command, 1, 1);
 8003770:	1df9      	adds	r1, r7, #7
 8003772:	2301      	movs	r3, #1
 8003774:	2201      	movs	r2, #1
 8003776:	4804      	ldr	r0, [pc, #16]	; (8003788 <ST7789_WriteCommand+0x2c>)
 8003778:	f7fe f91b 	bl	80019b2 <HAL_SPI_Transmit>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40020000 	.word	0x40020000
 8003788:	20000284 	.word	0x20000284

0800378c <ST7789_WriteData>:

static void ST7789_WriteData(uint16_t data)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
    uint8_t temp[2];
    temp[0] = (data >> 8) & 0xFF;
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	b29b      	uxth	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	733b      	strb	r3, [r7, #12]
    temp[1] = data & 0xFF;
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	737b      	strb	r3, [r7, #13]

    ST7789_DC_Data();
 80037a6:	2201      	movs	r2, #1
 80037a8:	2104      	movs	r1, #4
 80037aa:	4807      	ldr	r0, [pc, #28]	; (80037c8 <ST7789_WriteData+0x3c>)
 80037ac:	f7fd fbe8 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &temp, 2, 1);
 80037b0:	f107 010c 	add.w	r1, r7, #12
 80037b4:	2301      	movs	r3, #1
 80037b6:	2202      	movs	r2, #2
 80037b8:	4804      	ldr	r0, [pc, #16]	; (80037cc <ST7789_WriteData+0x40>)
 80037ba:	f7fe f8fa 	bl	80019b2 <HAL_SPI_Transmit>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40020000 	.word	0x40020000
 80037cc:	20000284 	.word	0x20000284

080037d0 <ST7789_WriteData8>:

static void ST7789_WriteData8(uint8_t data)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
    ST7789_DC_Data();
 80037da:	2201      	movs	r2, #1
 80037dc:	2104      	movs	r1, #4
 80037de:	4806      	ldr	r0, [pc, #24]	; (80037f8 <ST7789_WriteData8+0x28>)
 80037e0:	f7fd fbce 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 80037e4:	1df9      	adds	r1, r7, #7
 80037e6:	2301      	movs	r3, #1
 80037e8:	2201      	movs	r2, #1
 80037ea:	4804      	ldr	r0, [pc, #16]	; (80037fc <ST7789_WriteData8+0x2c>)
 80037ec:	f7fe f8e1 	bl	80019b2 <HAL_SPI_Transmit>
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40020000 	.word	0x40020000
 80037fc:	20000284 	.word	0x20000284

08003800 <ST7789_SetAddress>:

static void ST7789_SetAddress(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4623      	mov	r3, r4
 8003810:	80fb      	strh	r3, [r7, #6]
 8003812:	4603      	mov	r3, r0
 8003814:	80bb      	strh	r3, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	807b      	strh	r3, [r7, #2]
 800381a:	4613      	mov	r3, r2
 800381c:	803b      	strh	r3, [r7, #0]
    ST7789_WriteCommand(ST7789_CASET);
 800381e:	202a      	movs	r0, #42	; 0x2a
 8003820:	f7ff ff9c 	bl	800375c <ST7789_WriteCommand>
    ST7789_WriteData(x0);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ffb0 	bl	800378c <ST7789_WriteData>
    ST7789_WriteData(x1);
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ffac 	bl	800378c <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RASET);
 8003834:	202b      	movs	r0, #43	; 0x2b
 8003836:	f7ff ff91 	bl	800375c <ST7789_WriteCommand>
    ST7789_WriteData(y0 + ST7789_OFFSET_Y);
 800383a:	88bb      	ldrh	r3, [r7, #4]
 800383c:	3314      	adds	r3, #20
 800383e:	b29b      	uxth	r3, r3
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ffa3 	bl	800378c <ST7789_WriteData>
    ST7789_WriteData(y1 + ST7789_OFFSET_Y);
 8003846:	883b      	ldrh	r3, [r7, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	b29b      	uxth	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff9d 	bl	800378c <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR);
 8003852:	202c      	movs	r0, #44	; 0x2c
 8003854:	f7ff ff82 	bl	800375c <ST7789_WriteCommand>
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}

08003860 <ST7789_GPIO_Init>:
/*=================================================================*/

void ST7789_GPIO_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
    /* Init Pins for ST7789 driver. */
    GPIO_InitTypeDef  GPIO_InitStructure = {0};
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
    GPIO_InitStructure.Pin = (ST7789_RST_PIN | ST7789_CS_PIN | ST7789_DC_PIN | ST7789_BLK_PIN);
 8003874:	2347      	movs	r3, #71	; 0x47
 8003876:	607b      	str	r3, [r7, #4]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003878:	2301      	movs	r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4808      	ldr	r0, [pc, #32]	; (80038a8 <ST7789_GPIO_Init+0x48>)
 8003886:	f7fd f9f7 	bl	8000c78 <HAL_GPIO_Init>

    /* Set all pins in its default state (Plus enable blacklusght). */
    HAL_GPIO_WritePin(GPIOA, (ST7789_RST_PIN | ST7789_DC_PIN | ST7789_BLK_PIN), GPIO_PIN_SET);
 800388a:	2201      	movs	r2, #1
 800388c:	2145      	movs	r1, #69	; 0x45
 800388e:	4806      	ldr	r0, [pc, #24]	; (80038a8 <ST7789_GPIO_Init+0x48>)
 8003890:	f7fd fb76 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, ST7789_CS_PIN, GPIO_PIN_RESET);
 8003894:	2200      	movs	r2, #0
 8003896:	2102      	movs	r1, #2
 8003898:	4803      	ldr	r0, [pc, #12]	; (80038a8 <ST7789_GPIO_Init+0x48>)
 800389a:	f7fd fb71 	bl	8000f80 <HAL_GPIO_WritePin>
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40020000 	.word	0x40020000

080038ac <ST7789_Init>:

void ST7789_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
    /* hardware reset. */
    ST7789_RST_Clr();
 80038b0:	2200      	movs	r2, #0
 80038b2:	2101      	movs	r1, #1
 80038b4:	4863      	ldr	r0, [pc, #396]	; (8003a44 <ST7789_Init+0x198>)
 80038b6:	f7fd fb63 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80038ba:	2064      	movs	r0, #100	; 0x64
 80038bc:	f7fd f8d6 	bl	8000a6c <HAL_Delay>
    ST7789_RST_Set();
 80038c0:	2201      	movs	r2, #1
 80038c2:	2101      	movs	r1, #1
 80038c4:	485f      	ldr	r0, [pc, #380]	; (8003a44 <ST7789_Init+0x198>)
 80038c6:	f7fd fb5b 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80038ca:	2064      	movs	r0, #100	; 0x64
 80038cc:	f7fd f8ce 	bl	8000a6c <HAL_Delay>

    /* Sleep out sequence. [Wait time can be decreesed to 5 ms according to datasheet] */
    ST7789_WriteCommand(0x11); 
 80038d0:	2011      	movs	r0, #17
 80038d2:	f7ff ff43 	bl	800375c <ST7789_WriteCommand>
    HAL_Delay(120);
 80038d6:	2078      	movs	r0, #120	; 0x78
 80038d8:	f7fd f8c8 	bl	8000a6c <HAL_Delay>
	ST7789_WriteCommand(0x36);
 80038dc:	2036      	movs	r0, #54	; 0x36
 80038de:	f7ff ff3d 	bl	800375c <ST7789_WriteCommand>
    ST7789_WriteData8(0x00);
 80038e2:	2000      	movs	r0, #0
 80038e4:	f7ff ff74 	bl	80037d0 <ST7789_WriteData8>

    ST7789_WriteCommand(ST7789_COLMOD);
 80038e8:	203a      	movs	r0, #58	; 0x3a
 80038ea:	f7ff ff37 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x05);
 80038ee:	2005      	movs	r0, #5
 80038f0:	f7ff ff6e 	bl	80037d0 <ST7789_WriteData8>

    ST7789_WriteCommand(0xB2);
 80038f4:	20b2      	movs	r0, #178	; 0xb2
 80038f6:	f7ff ff31 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x0C);
 80038fa:	200c      	movs	r0, #12
 80038fc:	f7ff ff68 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x0C);
 8003900:	200c      	movs	r0, #12
 8003902:	f7ff ff65 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x00);
 8003906:	2000      	movs	r0, #0
 8003908:	f7ff ff62 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x33);
 800390c:	2033      	movs	r0, #51	; 0x33
 800390e:	f7ff ff5f 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x33); 
 8003912:	2033      	movs	r0, #51	; 0x33
 8003914:	f7ff ff5c 	bl	80037d0 <ST7789_WriteData8>

    ST7789_WriteCommand(0xB7); 
 8003918:	20b7      	movs	r0, #183	; 0xb7
 800391a:	f7ff ff1f 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x35);  
 800391e:	2035      	movs	r0, #53	; 0x35
 8003920:	f7ff ff56 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xBB);
 8003924:	20bb      	movs	r0, #187	; 0xbb
 8003926:	f7ff ff19 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x19);
 800392a:	2019      	movs	r0, #25
 800392c:	f7ff ff50 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xC0);
 8003930:	20c0      	movs	r0, #192	; 0xc0
 8003932:	f7ff ff13 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x2C);
 8003936:	202c      	movs	r0, #44	; 0x2c
 8003938:	f7ff ff4a 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xC2);
 800393c:	20c2      	movs	r0, #194	; 0xc2
 800393e:	f7ff ff0d 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x01);
 8003942:	2001      	movs	r0, #1
 8003944:	f7ff ff44 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xC3);
 8003948:	20c3      	movs	r0, #195	; 0xc3
 800394a:	f7ff ff07 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x12);   
 800394e:	2012      	movs	r0, #18
 8003950:	f7ff ff3e 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xC4);
 8003954:	20c4      	movs	r0, #196	; 0xc4
 8003956:	f7ff ff01 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x20);  
 800395a:	2020      	movs	r0, #32
 800395c:	f7ff ff38 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xC6); 
 8003960:	20c6      	movs	r0, #198	; 0xc6
 8003962:	f7ff fefb 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0x0F);    
 8003966:	200f      	movs	r0, #15
 8003968:	f7ff ff32 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xD0); 
 800396c:	20d0      	movs	r0, #208	; 0xd0
 800396e:	f7ff fef5 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0xA4);
 8003972:	20a4      	movs	r0, #164	; 0xa4
 8003974:	f7ff ff2c 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0xA1);
 8003978:	20a1      	movs	r0, #161	; 0xa1
 800397a:	f7ff ff29 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xE0);
 800397e:	20e0      	movs	r0, #224	; 0xe0
 8003980:	f7ff feec 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0xD0);
 8003984:	20d0      	movs	r0, #208	; 0xd0
 8003986:	f7ff ff23 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x04);
 800398a:	2004      	movs	r0, #4
 800398c:	f7ff ff20 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x0D);
 8003990:	200d      	movs	r0, #13
 8003992:	f7ff ff1d 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x11);
 8003996:	2011      	movs	r0, #17
 8003998:	f7ff ff1a 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x13);
 800399c:	2013      	movs	r0, #19
 800399e:	f7ff ff17 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x2B);
 80039a2:	202b      	movs	r0, #43	; 0x2b
 80039a4:	f7ff ff14 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x3F);
 80039a8:	203f      	movs	r0, #63	; 0x3f
 80039aa:	f7ff ff11 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x54);
 80039ae:	2054      	movs	r0, #84	; 0x54
 80039b0:	f7ff ff0e 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x4C);
 80039b4:	204c      	movs	r0, #76	; 0x4c
 80039b6:	f7ff ff0b 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x18);
 80039ba:	2018      	movs	r0, #24
 80039bc:	f7ff ff08 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x0D);
 80039c0:	200d      	movs	r0, #13
 80039c2:	f7ff ff05 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x0B);
 80039c6:	200b      	movs	r0, #11
 80039c8:	f7ff ff02 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x1F);
 80039cc:	201f      	movs	r0, #31
 80039ce:	f7ff feff 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x23);
 80039d2:	2023      	movs	r0, #35	; 0x23
 80039d4:	f7ff fefc 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(0xE1);
 80039d8:	20e1      	movs	r0, #225	; 0xe1
 80039da:	f7ff febf 	bl	800375c <ST7789_WriteCommand>
	ST7789_WriteData8(0xD0);
 80039de:	20d0      	movs	r0, #208	; 0xd0
 80039e0:	f7ff fef6 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x04);
 80039e4:	2004      	movs	r0, #4
 80039e6:	f7ff fef3 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x0C);
 80039ea:	200c      	movs	r0, #12
 80039ec:	f7ff fef0 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x11);
 80039f0:	2011      	movs	r0, #17
 80039f2:	f7ff feed 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x13);
 80039f6:	2013      	movs	r0, #19
 80039f8:	f7ff feea 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x2C);
 80039fc:	202c      	movs	r0, #44	; 0x2c
 80039fe:	f7ff fee7 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x3F);
 8003a02:	203f      	movs	r0, #63	; 0x3f
 8003a04:	f7ff fee4 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x44);
 8003a08:	2044      	movs	r0, #68	; 0x44
 8003a0a:	f7ff fee1 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x51);
 8003a0e:	2051      	movs	r0, #81	; 0x51
 8003a10:	f7ff fede 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x2F);
 8003a14:	202f      	movs	r0, #47	; 0x2f
 8003a16:	f7ff fedb 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x1F);
 8003a1a:	201f      	movs	r0, #31
 8003a1c:	f7ff fed8 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x1F);
 8003a20:	201f      	movs	r0, #31
 8003a22:	f7ff fed5 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x20);
 8003a26:	2020      	movs	r0, #32
 8003a28:	f7ff fed2 	bl	80037d0 <ST7789_WriteData8>
	ST7789_WriteData8(0x23);
 8003a2c:	2023      	movs	r0, #35	; 0x23
 8003a2e:	f7ff fecf 	bl	80037d0 <ST7789_WriteData8>

	ST7789_WriteCommand(ST7789_INVON); 
 8003a32:	2021      	movs	r0, #33	; 0x21
 8003a34:	f7ff fe92 	bl	800375c <ST7789_WriteCommand>

	ST7789_WriteCommand(ST7789_DISPON); 
 8003a38:	2029      	movs	r0, #41	; 0x29
 8003a3a:	f7ff fe8f 	bl	800375c <ST7789_WriteCommand>
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40020000 	.word	0x40020000

08003a48 <ST7789_FillAreaWithColor>:

void ST7789_FillAreaWithColor(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	80fb      	strh	r3, [r7, #6]
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80bb      	strh	r3, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	807b      	strh	r3, [r7, #2]
 8003a62:	4613      	mov	r3, r2
 8003a64:	803b      	strh	r3, [r7, #0]
    ST7789_SetAddress(x0, y0, x1, y1);
 8003a66:	883b      	ldrh	r3, [r7, #0]
 8003a68:	887a      	ldrh	r2, [r7, #2]
 8003a6a:	88b9      	ldrh	r1, [r7, #4]
 8003a6c:	88f8      	ldrh	r0, [r7, #6]
 8003a6e:	f7ff fec7 	bl	8003800 <ST7789_SetAddress>
    size_t size = (y1 - y0) * (x1 - x0);
 8003a72:	883a      	ldrh	r2, [r7, #0]
 8003a74:	88bb      	ldrh	r3, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	8879      	ldrh	r1, [r7, #2]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	1a8a      	subs	r2, r1, r2
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < size; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e006      	b.n	8003a98 <ST7789_FillAreaWithColor+0x50>
    {
        ST7789_WriteData(color);
 8003a8a:	8c3b      	ldrh	r3, [r7, #32]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fe7d 	bl	800378c <ST7789_WriteData>
    for (size_t i = 0; i < size; i++)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3f4      	bcc.n	8003a8a <ST7789_FillAreaWithColor+0x42>
    }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}

08003aaa <memset>:
 8003aaa:	4402      	add	r2, r0
 8003aac:	4603      	mov	r3, r0
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d100      	bne.n	8003ab4 <memset+0xa>
 8003ab2:	4770      	bx	lr
 8003ab4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab8:	e7f9      	b.n	8003aae <memset+0x4>
	...

08003abc <__libc_init_array>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4d0d      	ldr	r5, [pc, #52]	; (8003af4 <__libc_init_array+0x38>)
 8003ac0:	4c0d      	ldr	r4, [pc, #52]	; (8003af8 <__libc_init_array+0x3c>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	42a6      	cmp	r6, r4
 8003aca:	d109      	bne.n	8003ae0 <__libc_init_array+0x24>
 8003acc:	4d0b      	ldr	r5, [pc, #44]	; (8003afc <__libc_init_array+0x40>)
 8003ace:	4c0c      	ldr	r4, [pc, #48]	; (8003b00 <__libc_init_array+0x44>)
 8003ad0:	f000 f818 	bl	8003b04 <_init>
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	2600      	movs	r6, #0
 8003ada:	42a6      	cmp	r6, r4
 8003adc:	d105      	bne.n	8003aea <__libc_init_array+0x2e>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae4:	4798      	blx	r3
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	e7ee      	b.n	8003ac8 <__libc_init_array+0xc>
 8003aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aee:	4798      	blx	r3
 8003af0:	3601      	adds	r6, #1
 8003af2:	e7f2      	b.n	8003ada <__libc_init_array+0x1e>
 8003af4:	08003b6c 	.word	0x08003b6c
 8003af8:	08003b6c 	.word	0x08003b6c
 8003afc:	08003b6c 	.word	0x08003b6c
 8003b00:	08003b70 	.word	0x08003b70

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	bf00      	nop
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	bf00      	nop
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
